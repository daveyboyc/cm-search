"""
Django settings for capacity_checker project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR should be the directory containing settings.py
BASE_DIR = Path(__file__).resolve().parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-fallback-for-development-only')

# Google Maps API Key
GOOGLE_MAPS_API_KEY = os.environ.get('GOOGLE_MAPS_API_KEY', 'your-google-maps-api-key-here')

# Stripe Configuration
STRIPE_PUBLIC_KEY = os.environ.get('STRIPE_PUBLIC_KEY', 'pk_test_your_stripe_public_key_here')
STRIPE_SECRET_KEY = os.environ.get('STRIPE_SECRET_KEY', 'sk_test_your_stripe_secret_key_here')
# --- Add Webhook Secret --- #
STRIPE_WEBHOOK_SECRET = os.environ.get('STRIPE_WEBHOOK_SECRET') # Get from environment

# Stripe Price IDs for tiered access
# 2-tier system: Only £5/year subscription needed
STRIPE_YEARLY_ACCESS_PRICE_ID = os.environ.get('STRIPE_YEARLY_ACCESS_PRICE_ID', 'price_1RYnEbIn9WiPSMiwoGWsovBJ')  # £5/year recurring

# Trading Board Price ID
STRIPE_TRADING_ADVERT_PRICE_ID = os.environ.get('STRIPE_TRADING_ADVERT_PRICE_ID', 'price_trading_advert_5gbp')  # £5 one-time for advert posting

# Legacy price IDs (kept for reference during transition)
STRIPE_LIST_ACCESS_PRICE_ID = os.environ.get('STRIPE_LIST_ACCESS_PRICE_ID', 'price_1RYVyOIn9WiPSMiwfoRMkNOL')
STRIPE_FULL_ACCESS_PRICE_ID = os.environ.get('STRIPE_FULL_ACCESS_PRICE_ID', 'price_1RYVyPIn9WiPSMiwabrBFFqb')

# Add this setting to your settings.py file
CSRF_TRUSTED_ORIGINS = [
    'https://capacitymarket.co.uk',
    'https://www.capacitymarket.co.uk',
    # Add any other domains you might use
]

# SECURITY WARNING: don't run with debug turned on in production!
# Read DEBUG setting from environment variable (defaults to '0' -> False)
DEBUG = os.environ.get('DEBUG', '0') == '1'  # Uncomment original line
# DEBUG = True  # Comment out force debug True

ALLOWED_HOSTS = ['neso-cmr-search-da0169863eae.herokuapp.com', 'localhost', '127.0.0.1', '192.168.1.230', '.capacitymarket.co.uk', 'www.capacitymarket.co.uk', 'capacitychecker.co.uk', 'www.capacitychecker.co.uk']


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sitemaps",  # Add sitemaps app
    "checker",
    'django.contrib.humanize',
    'accounts',
    'widget_tweaks',
    'monitoring',
    'trades',  # Trading bulletin board
]

# Conditionally add debug_toolbar if DEBUG is True
if DEBUG:
    INSTALLED_APPS.append('debug_toolbar')

MIDDLEWARE = [
    # 'checker.middleware.maintenance.MaintenanceModeMiddleware',  # Temporarily disabled for performance
    # 'monitoring.bot_blocker.BotBlockerMiddleware',  # Temporarily disabled for performance
    'checker.middleware.api_subdomain.APISubdomainMiddleware',  # Handle API subdomain requests
    "django.middleware.security.SecurityMiddleware",
    # 'monitoring.middleware.EgressMonitoringMiddleware',  # Temporarily disabled - breaks static files
    # 'monitoring.middleware.DatabaseQueryMonitoringMiddleware',  # Temporarily disabled
    "django.middleware.gzip.GZipMiddleware",
    # 'monitoring.performance_middleware.ResponseCompressionMiddleware',  # Temporarily disabled for performance
    "whitenoise.middleware.WhiteNoiseMiddleware",  # Add WhiteNoise for static files in production
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    'checker.middleware.access_control.AccessControlMiddleware',  # 2-tier access control - RE-ENABLED WITH SUBSCRIPTION MANAGER
    # 'monitoring.performance_middleware.PerformanceOptimizationMiddleware',  # Temporarily disabled for performance
]

# Conditionally add Debug Toolbar middleware if DEBUG is True
if DEBUG:
    MIDDLEWARE.insert(MIDDLEWARE.index("django.middleware.clickjacking.XFrameOptionsMiddleware") + 1, "debug_toolbar.middleware.DebugToolbarMiddleware")

ROOT_URLCONF = "capacity_checker.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR.parent / "templates"],  # Add this path to look for templates in the project root
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "accounts.context_processors.account_status_processor",
                "checker.context_processors.is_premium_page",
            ],
        },
    },
]

WSGI_APPLICATION = "capacity_checker.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Default SQLite for development
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / "db.sqlite3", # Use pathlib syntax
    }
}

# Override with DATABASE_URL environment variable if available
if 'DATABASE_URL' in os.environ:
    DATABASES['default'] = dj_database_url.config(
        conn_max_age=300,  # Increased to 5 minutes for better connection reuse
        ssl_require=True,
        conn_health_checks=True,  # Enable connection health checks
    )


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"  # For Heroku collectstatic
STATICFILES_DIRS = [
    # Point to the project root's static directory
    BASE_DIR.parent / "static",
]

# WhiteNoise configuration for serving static files in production
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Update the API_URL with the correct National Grid ESO domain
API_URL = 'https://data.nationalgrideso.com/api/3/action/datastore_search'

# Update your CACHES setting to use Redis
import os
redis_url = os.environ.get('REDIS_URL', 'redis://127.0.0.1:6379/0')

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': redis_url,
        'TIMEOUT': 3600,  # 1 hour default timeout (good balance)
    }
}

# Cache middleware settings to prevent excessive page caching
CACHE_MIDDLEWARE_SECONDS = 120  # Maximum 2 minutes for page cache
CACHE_MIDDLEWARE_KEY_PREFIX = 'cmr'

# Trigger rebuild (temporary comment)

# --- Logging Configuration --- Added ----
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',  # Capture DEBUG level
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO', # Keep Django's own logs at INFO
            'propagate': True,
        },
        'django.request': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'django.template': {
            'handlers': ['console'],
            'level': 'WARNING',  # Disable template debug spam
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'INFO',  # Set to DEBUG to see all database queries
            'propagate': False,
        },
        'django.mail': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'checker': {  # Configure our app's logger
            'handlers': ['console'],
            'level': 'INFO', # Show INFO messages from our app (includes egress optimization logs)
            'propagate': True,
        },
        'checker.views_company_optimized': {  # Egress optimization logs
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'checker.views_technology_optimized': {  # Egress optimization logs
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'checker.views_search_map_simple': {  # Egress optimization logs
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'accounts': {  # Configure accounts app logger
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'checker.services.data_access': { # Explicitly configure data_access logger
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False, # Stop propagation to avoid double logging if root also logs
        },
        # You can add other specific loggers here if needed
    },
    'root': { # Catch-all logger
        'handlers': ['console'],
        'level': 'WARNING', # Set root level higher if desired
    }
}
# --- End Logging Configuration ---

# Add INTERNAL_IPS for Django Debug Toolbar
INTERNAL_IPS = ['127.0.0.1']

# Login redirect
LOGIN_REDIRECT_URL = '/'  # Redirect to homepage/search after login

# Email Configuration
if DEBUG:
    # Use console backend for local development
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
else:
    # Use Mailgun for production
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = os.environ.get('MAILGUN_SMTP_SERVER')
    EMAIL_PORT = int(os.environ.get('MAILGUN_SMTP_PORT', 587))
    EMAIL_USE_TLS = True
    EMAIL_HOST_USER = os.environ.get('MAILGUN_SMTP_LOGIN')
    EMAIL_HOST_PASSWORD = os.environ.get('MAILGUN_SMTP_PASSWORD')
    
DEFAULT_FROM_EMAIL = 'hello@capacitymarket.co.uk' # As requested

# Site configuration for activation links
if DEBUG:
    SITE_SCHEME = 'http'
    SITE_DOMAIN = 'localhost:8000'
else:
    SITE_SCHEME = 'https'
    SITE_DOMAIN = 'capacitymarket.co.uk'

# Add Debug Toolbar Configuration
DEBUG_TOOLBAR_CONFIG = {
    'SHOW_TOOLBAR_CALLBACK': lambda request: False,  # Disabled for production
    'ENABLE_STACKTRACES': True,
}

# Ensure the cache panel is enabled
DEBUG_TOOLBAR_PANELS = [
    'debug_toolbar.panels.versions.VersionsPanel',
    'debug_toolbar.panels.timer.TimerPanel',
    'debug_toolbar.panels.settings.SettingsPanel',
    'debug_toolbar.panels.headers.HeadersPanel',
    'debug_toolbar.panels.request.RequestPanel',
    'debug_toolbar.panels.sql.SQLPanel',
    'debug_toolbar.panels.staticfiles.StaticFilesPanel',
    'debug_toolbar.panels.templates.TemplatesPanel',
    'debug_toolbar.panels.cache.CachePanel',
    'debug_toolbar.panels.signals.SignalsPanel',
    'debug_toolbar.panels.logging.LoggingPanel',
    'debug_toolbar.panels.redirects.RedirectsPanel',
    'debug_toolbar.panels.profiling.ProfilingPanel',
]

# API key for GPT integration
API_KEY = os.environ.get('API_KEY', 'your_custom_api_key_for_auth')

# Public API key for AI systems (read-only, rate-limited)
PUBLIC_API_KEY = os.environ.get('PUBLIC_API_KEY', 'cmr_public_readonly_ai_access_2024')
# Redis monitoring and limits
REDIS_MAX_MEMORY_PERCENT = 80  # Warn when Redis uses more than 80% memory
CACHE_MIDDLEWARE_SECONDS = 120  # Cache pages for 2 minutes (reduced from 10 to prevent Redis spikes)
CACHE_MIDDLEWARE_KEY_PREFIX = 'cmr'

# Maintenance Mode Configuration
MAINTENANCE_MODE = os.environ.get('MAINTENANCE_MODE', 'False').lower() == 'true'
MAINTENANCE_ALLOWED_IPS = [
    '127.0.0.1',  # localhost
    '::1',  # localhost IPv6
    # Add your IP addresses here to bypass maintenance mode
]
